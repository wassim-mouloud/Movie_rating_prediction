import numpy as np
import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.metrics import mean_squared_error, r2_score
import matplotlib.pyplot as plt

from data_preprocessing import load_data, explore_data
from data_split import split_data

def train_decision_tree(X_train, y_train, max_depth=None, random_state=42):
    """
    Train a Decision Tree Regressor.
    
    Args:
        X_train (pd.DataFrame): Training features.
        y_train (pd.Series): Training target.
        max_depth (int or None): The maximum depth of the tree. If None, then nodes are expanded until all leaves are pure.
        random_state (int): Random state for reproducibility.
    
    Returns:
        DecisionTreeRegressor: The trained model.
    """
    model = DecisionTreeRegressor(max_depth=max_depth, random_state=random_state)
    model.fit(X_train, y_train)
    print(f"Decision Tree model trained with max_depth = {max_depth}")
    return model

def evaluate_model(model, X_test, y_test):
    """
    Evaluate the model on the test set and print RMSE and R².
    
    Args:
        model (DecisionTreeRegressor): The trained decision tree.
        X_test (pd.DataFrame): Test features.
        y_test (pd.Series): Test target.
    
    Returns:
        tuple: (RMSE, R²)
    """
    y_pred = model.predict(X_test)
    rmse = np.sqrt(mean_squared_error(y_test, y_pred))
    r2 = r2_score(y_test, y_pred)
    print(f"Model evaluation:\nRMSE = {rmse:.3f}\nR² = {r2:.3f}")
    return rmse, r2

def plot_predictions(y_test, y_pred):
    """
    Plot a scatter plot comparing actual and predicted values.
    """
    plt.figure(figsize=(8, 6))
    plt.scatter(y_test, y_pred, alpha=0.5, color='green', label="Predictions")
    plt.xlabel("Actual Values")
    plt.ylabel("Predicted Values")
    plt.title("Decision Tree: Actual vs Predicted")
    min_val = min(y_test.min(), y_pred.min())
    max_val = max(y_test.max(), y_pred.max())
    plt.plot([min_val, max_val], [min_val, max_val], 'r--', label="Identity Line")
    plt.legend()
    plt.show()

if __name__ == "__main__":
    # File path to the processed data (from your pipeline)
    file_path = "data/processed_pipeline.csv"
    target = "Rating"
    
    # Load data
    df = load_data(file_path)
    print("\nData preview:")
    explore_data(df)
    
    # Split data into training and test sets
    X_train, X_test, y_train, y_test = split_data(file_path, target, test_size=0.2)
    print(f"\nTraining set size: {X_train.shape}")
    print(f"Test set size: {X_test.shape}")
    
    # Train the Decision Tree Regressor (you can adjust max_depth for tuning)
    model = train_decision_tree(X_train, y_train, max_depth=5)
    
    # Evaluate the model
    evaluate_model(model, X_test, y_test)
    
    # Plot actual vs predicted values
    y_pred = model.predict(X_test)
    plot_predictions(y_test, y_pred)
