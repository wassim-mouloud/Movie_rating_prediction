import numpy as np
import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.metrics import mean_squared_error

from data_preprocessing import load_data, explore_data
from data_split import split_data

def train_decision_tree(X_train, y_train, max_depth=None, random_state=42):
    """
    Entraîne un Decision Tree Regressor.
    
    Args:
        X_train (pd.DataFrame): Features d'entraînement.
        y_train (pd.Series): Cible d'entraînement.
        max_depth (int or None): Profondeur maximale de l'arbre.
        random_state (int): Graine pour la reproductibilité.
    
    Returns:
        DecisionTreeRegressor: Le modèle entraîné.
    """
    model = DecisionTreeRegressor(max_depth=max_depth, random_state=random_state)
    model.fit(X_train, y_train)
    print(f"Modèle Decision Tree entraîné avec max_depth = {max_depth}")
    return model

def evaluate_model(model, X_test, y_test):
    """
    Évalue le modèle sur l'ensemble de test et affiche RMSE et R².
    
    Args:
        model (DecisionTreeRegressor): Le modèle entraîné.
        X_test (pd.DataFrame): Features de test.
        y_test (pd.Series): Cible de test.
    
    Returns:
        tuple: (RMSE, R²)
    """
    y_pred = model.predict(X_test)
    rmse = np.sqrt(mean_squared_error(y_test, y_pred))
    print(f"Évaluation du modèle :\nRMSE = {rmse:.3f}")
    return rmse

if __name__ == "__main__":
    file_path = "data/processed_pipeline.csv"
    target = "Rating"
    
    df = load_data(file_path)
    print("\nAperçu des données chargées :")
    explore_data(df)
    
    X_train, X_test, y_train, y_test = split_data(file_path, target, test_size=0.2)
    print(f"\nTaille de l'ensemble d'entraînement : {X_train.shape}")
    print(f"Taille de l'ensemble de test : {X_test.shape}")
    
    model = train_decision_tree(X_train, y_train, max_depth=5)
    
    evaluate_model(model, X_test, y_test)
    
    y_pred = model.predict(X_test)
    comparison_df = pd.DataFrame({
        "Actual": y_test.reset_index(drop=True),
        "Predicted": y_pred
    })
    print("\nComparaison des valeurs réelles et prédites :")
    print(comparison_df.head(20))
